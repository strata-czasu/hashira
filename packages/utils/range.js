"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.range = range;
exports.rangeObject = rangeObject;
/**
 * Returns an array of numbers from `start` to `end - 1`.
 * Please keep in mind that this WILL cause type issues if negative numbers are passed.
 *
 * @example
 * const result = range(0, 5);
 * // result: [0, 1, 2, 3, 4]
 * const result2 = range(2, 6);
 * // result2: [2, 3, 4, 5]
 *
 * @param start - The starting number (inclusive).
 * @param end - The ending number (exclusive).
 * @returns An array of numbers from `start` to `end - 1`.
 */
function range(start, end) {
    if (start < 0 || end < 0) {
        throw new Error("Range bounds must be non-negative integers");
    }
    var result = [];
    for (var i = start; i < end; i++) {
        result.push(i);
    }
    return result;
}
/**
 * Creates an object with keys from `start` to `end - 1` and values generated by the `mapper` function.
 * Please keep in mind that this WILL cause issues if negative numbers are passed.
 * @example
 * const result = rangeObject(0, 3, (i) => i * 2);
 * // result: { 0: 0, 1: 2, 2: 4 }
 *
 * @param start - The starting number (inclusive).
 * @param end  - The ending number (exclusive).
 * @param mapper - A function that takes a number and returns a value of type `T`.
 * @returns An object with keys from `start` to `end - 1` and values generated by the `mapper` function.
 *
 */
function rangeObject(start, end, mapper, keyMapper) {
    if (start < 0 || end < 0) {
        throw new Error("Range bounds must be non-negative integers");
    }
    var keyMapperFn = keyMapper || (function (i) { return i; });
    var result = {};
    for (var i = start; i < end; i++) {
        result[keyMapperFn(i)] = mapper(i);
    }
    return result;
}
