generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AutoRole {
  id        Int      @id(map: "core_auto_role_pkey") @default(autoincrement())
  guildId   String
  roleId    String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autoRole_guildId_guild_id_fk")

  @@unique([guildId, roleId], map: "autoRole_guildId_roleId_unique")
  @@map("autoRole")
}

model ColorRole {
  id         Int       @id(map: "strata_color_role_pkey") @default(autoincrement())
  guildId    String
  ownerId    String
  name       String
  roleId     String
  expiration DateTime? @db.Timestamp(6)
  slots      Int
  gradient   Boolean   @default(false)
  guild      Guild     @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colorRole_guildId_guild_id_fk")
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colorRole_ownerId_users_id_fk")

  @@map("colorRole")
}

model DailyPointsRedeems {
  id        Int      @id(map: "strata_daily_points_redeems_pkey") @default(autoincrement())
  guildId   String
  userId    String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "dailyPointsRedeems_guildId_guild_id_fk")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "dailyPointsRedeems_userId_users_id_fk")

  @@map("dailyPointsRedeems")
}

model LastFishing {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  timestamp DateTime @default(now())
  guild     Guild    @relation(fields: [guildId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model EmojiUsage {
  id        Int      @id(map: "core_emoji_usage_pkey") @default(autoincrement())
  guildId   String
  emojiId   String
  userId    String // This should be related to User
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "emojiUsage_guildId_guild_id_fk")

  @@map("emojiUsage")
}

model Guild {
  id                  String               @id(map: "core_guild_pkey")
  autoRole            AutoRole[]
  colorRole           ColorRole[]
  currency            Currency[]
  dailyPointsRedeems  DailyPointsRedeems[]
  emojiUsage          EmojiUsage[]
  guildSettings       GuildSettings?
  mute                Mute[]
  userTextActivity    UserTextActivity[]
  verification        Verification[]
  wallet              Wallet[]
  warn                Warn[]
  protectedInvites    ProtectedInvite[]
  ultimatums          Ultimatum[]
  stickyMessages      StickyMessage[]
  channelRestrictions ChannelRestriction[]
  voiceSessions       VoiceSession[]
  lastFishings        LastFishing[]
  giveaways           Giveaway[]
  items               Item[]
  moderatorLeaves     ModeratorLeave[]

  @@map("guild")
}

model LogSettings {
  id                     Int           @id @default(autoincrement())
  guildSettingsId        Int           @unique
  messageLogChannelId    String?
  memberLogChannelId     String?
  roleLogChannelId       String?
  moderationLogChannelId String?
  profileLogChannelId    String?
  economyLogChannelId    String?
  guildSettings          GuildSettings @relation(fields: [guildSettingsId], references: [id])
}

model GuildSettings {
  id                   Int          @id(map: "core_guild_settings_pkey") @default(autoincrement())
  guildId              String       @unique(map: "guildSettings_guildId_unique")
  muteRoleId           String?
  plus18RoleId         String?
  moderatorLeaveRoleId String?
  meta                 Json         @default("{ \"version\": 1 }")
  guild                Guild        @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "guildSettings_guildId_guild_id_fk")
  logSettings          LogSettings?

  @@map("guildSettings")
}

model ProtectedInvite {
  id      Int    @id @default(autoincrement())
  guildId String
  code    String
  guild   Guild  @relation(fields: [guildId], references: [id])
}

model User {
  id                                String                             @id(map: "core_users_pkey")
  verificationLevel                 VerificationLevel?
  marriedTo                         String?
  marriedAt                         DateTime?                          @db.Timestamp(6)
  birthdayEventStage2024Completions BirthdayEventStage2024Completion[]
  colorRoles                        ColorRole[]
  currencies                        Currency[]
  dailyPointsRedeems                DailyPointsRedeems[]
  inventoryItems                    InventoryItem[]
  createdItems                      Item[]
  givenMutes                        Mute[]                             @relation("mute_moderatorIdTousers")
  receivedMutes                     Mute[]                             @relation("mute_userIdTousers")
  createdShopItems                  ShopItem[]
  transactions                      Transaction[]
  userTextActivities                UserTextActivity[]
  marriedUser                       User?                              @relation("usersTousers", fields: [marriedTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_marriedTo_users_id_fk")
  marriedToUsers                    User[]                             @relation("usersTousers")
  wallets                           Wallet[]
  givenVerifications                Verification[]                     @relation("verification_moderatorIdTousers")
  receivedVerifications             Verification[]                     @relation("verification_userIdTousers")
  givenWarns                        Warn[]                             @relation("warn_moderatorIdTousers")
  receivedWarns                     Warn[]                             @relation("warn_userIdTousers")
  ultimatums                        Ultimatum[]
  dmPolls                           DmPoll[]
  dmPollVotes                       DmPollVote[]
  participatingInDmPolls            DmPollParticipant[]
  dmPollExclusion                   DmPollExclusion?
  voiceSessions                     VoiceSession[]
  profileSettings                   ProfileSettings?
  displayedProfileBadges            DisplayedProfileBadge[]
  easter2025TeamMember              Easter2025TeamMember[]
  lastFishings                      LastFishing[]
  givenChannelRestrictions          ChannelRestriction[]               @relation("moderator")
  receivedChannelRestrictions       ChannelRestriction[]               @relation("user")
  giveawayParticipations            GiveawayParticipant[]
  giveawayWinnings                  GiveawayWinner[]
  createdGiveaways                  Giveaway[]
  moderatorLeaves                   ModeratorLeave[]

  @@map("users")
}

model ModeratorLeave {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  endsAt    DateTime  @db.Timestamp(6)
  guildId   String
  userId    String

  guild Guild @relation(fields: [guildId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model StickyMessage {
  id            Int     @id @default(autoincrement())
  guildId       String
  channelId     String  @unique
  lastMessageId String  @unique
  content       Json
  enabled       Boolean
  guild         Guild   @relation(fields: [guildId], references: [id])
}

enum DiscordButtonStyle {
  primary
  secondary
  success
  danger
  link
  premium

  @@map("button_style")
}
