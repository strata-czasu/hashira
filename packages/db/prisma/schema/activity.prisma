model UserTextActivity {
  id        Int      @id(map: "core_user_text_activity_pkey") @default(autoincrement())
  userId    String
  guildId   String
  messageId String
  channelId String
  timestamp DateTime @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userTextActivity_guildId_guild_id_fk")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userTextActivity_userId_users_id_fk")

  @@map("userTextActivity")
}

model VoiceSession {
  id        Int                      @id @default(autoincrement())
  channelId String
  userId    String
  guildId   String
  joinedAt  DateTime
  leftAt    DateTime?
  user      User                     @relation(fields: [userId], references: [id])
  guild     Guild                    @relation(fields: [guildId], references: [id])
  events    VoiceSessionStateEvent[]
}

model VoiceSessionStateEvent {
  id             Int          @id @default(autoincrement())
  voiceSessionId Int
  timestamp      DateTime
  isMuted        Boolean
  isDeafened     Boolean
  isStreaming    Boolean
  isVideo        Boolean
  voiceSession   VoiceSession @relation(fields: [voiceSessionId], references: [id])
}
