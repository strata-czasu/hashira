generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AutoRole {
  id        Int      @id(map: "core_auto_role_pkey") @default(autoincrement())
  guildId   String
  roleId    String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autoRole_guildId_guild_id_fk")

  @@unique([guildId, roleId], map: "autoRole_guildId_roleId_unique")
  @@map("autoRole")
}

model ColorRole {
  id         Int       @id(map: "strata_color_role_pkey") @default(autoincrement())
  guildId    String
  ownerId    String
  name       String
  roleId     String
  expiration DateTime? @db.Timestamp(6)
  slots      Int
  guild      Guild     @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colorRole_guildId_guild_id_fk")
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "colorRole_ownerId_users_id_fk")

  @@map("colorRole")
}

model DailyPointsRedeems {
  id        Int      @id(map: "strata_daily_points_redeems_pkey") @default(autoincrement())
  guildId   String
  userId    String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "dailyPointsRedeems_guildId_guild_id_fk")
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "dailyPointsRedeems_userId_users_id_fk")

  @@map("dailyPointsRedeems")
}

model EmojiUsage {
  id        Int      @id(map: "core_emoji_usage_pkey") @default(autoincrement())
  guildId   String
  emojiId   String
  userId    String
  timestamp DateTime @default(now()) @db.Timestamp(6)
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "emojiUsage_guildId_guild_id_fk")

  @@map("emojiUsage")
}

model Guild {
  id                  String               @id(map: "core_guild_pkey")
  autoRole            AutoRole[]
  colorRole           ColorRole[]
  currency            Currency[]
  dailyPointsRedeems  DailyPointsRedeems[]
  emojiUsage          EmojiUsage[]
  guildSettings       GuildSettings?
  mute                Mute[]
  userTextActivities  UserTextActivity[]
  userVoiceActivities UserVoiceActivity[]
  verification        Verification[]
  wallet              Wallet[]
  warn                Warn[]
  protectedInvites    ProtectedInvite[]
  ultimatums          Ultimatum[]

  @@map("guild")
}

model LogSettings {
  id                     Int           @id @default(autoincrement())
  guildSettingsId        Int           @unique
  messageLogChannelId    String?
  memberLogChannelId     String?
  moderationLogChannelId String?
  profileLogChannelId    String?
  guildSettings          GuildSettings @relation(fields: [guildSettingsId], references: [id])
}

model GuildSettings {
  id            Int          @id(map: "core_guild_settings_pkey") @default(autoincrement())
  guildId       String       @unique(map: "guildSettings_guildId_unique")
  logSettingsId Int?
  muteRoleId    String?
  plus18RoleId  String?
  guild         Guild        @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "guildSettings_guildId_guild_id_fk")
  logSettings   LogSettings?

  @@map("guildSettings")
}

model ProtectedInvite {
  id      Int    @id @default(autoincrement())
  guildId String
  code    String
  guild   Guild  @relation(fields: [guildId], references: [id])
}

model InventoryItem {
  id        Int       @id(map: "core_inventory_item_pkey") @default(autoincrement())
  itemId    Int
  userId    String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  item      Item      @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventoryItem_itemId_item_id_fk")
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inventoryItem_userId_users_id_fk")

  @@map("inventoryItem")
}

model Item {
  id            Int             @id(map: "core_item_pkey") @default(autoincrement())
  name          String
  description   String?
  createdAt     DateTime        @default(now()) @db.Timestamp(6)
  editedAt      DateTime?       @db.Timestamp(6)
  deletedAt     DateTime?       @db.Timestamp(6)
  createdBy     String
  inventoryItem InventoryItem[]
  creator       User            @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "item_createdBy_users_id_fk")
  shopItem      ShopItem[]

  @@map("item")
}

model Mute {
  id           Int       @id(map: "core_mute_pkey") @default(autoincrement())
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  editedAt     DateTime? @db.Timestamp(6)
  deletedAt    DateTime? @db.Timestamp(6)
  guildId      String
  userId       String
  moderatorId  String
  reason       String
  endsAt       DateTime  @db.Timestamp(6)
  deleteReason String?
  guild        Guild     @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mute_guildId_guild_id_fk")
  moderator    User      @relation("mute_moderatorIdTousers", fields: [moderatorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mute_moderatorId_users_id_fk")
  user         User      @relation("mute_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mute_userId_users_id_fk")

  @@index([userId], map: "mute_userId_index")
  @@map("mute")
}

model ShopItem {
  id        Int       @id(map: "core_shop_item_pkey") @default(autoincrement())
  itemId    Int
  price     Int
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  editedAt  DateTime? @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  createdBy String
  creator   User      @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shopItem_createdBy_users_id_fk")
  item      Item      @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shopItem_itemId_item_id_fk")

  @@map("shopItem")
}

model User {
  id                                String                             @id(map: "core_users_pkey")
  verificationLevel                 VerificationLevel?
  marriedTo                         String?
  marriedAt                         DateTime?                          @db.Timestamp(6)
  birthdayEventStage2024Completions BirthdayEventStage2024Completion[]
  colorRoles                        ColorRole[]
  currencies                        Currency[]
  dailyPointsRedeems                DailyPointsRedeems[]
  inventoryItems                    InventoryItem[]
  createdItems                      Item[]
  givenMutes                        Mute[]                             @relation("mute_moderatorIdTousers")
  receivedMutes                     Mute[]                             @relation("mute_userIdTousers")
  createdShopItems                  ShopItem[]
  transactions                      Transaction[]
  userTextActivities                UserTextActivity[]
  userVoiceActivities               UserVoiceActivity[]
  marriedUser                       User?                              @relation("usersTousers", fields: [marriedTo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_marriedTo_users_id_fk")
  marriedToUsers                    User[]                             @relation("usersTousers")
  wallets                           Wallet[]
  givenVerifications                Verification[]                     @relation("verification_moderatorIdTousers")
  receivedVerifications             Verification[]                     @relation("verification_userIdTousers")
  givenWarns                        Warn[]                             @relation("warn_moderatorIdTousers")
  receivedWarns                     Warn[]                             @relation("warn_userIdTousers")
  ultimatums                        Ultimatum[]
  dmPolls                           DmPoll[]
  dmPollVotes                       DmPollVote[]
  participatingInDmPolls            DmPollParticipant[]

  @@map("users")
}


model Warn {
  id           Int       @id(map: "core_warn_pkey") @default(autoincrement())
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  editedAt     DateTime? @db.Timestamp(6)
  guildId      String
  userId       String
  moderatorId  String
  reason       String
  deletedAt    DateTime? @db.Timestamp(6)
  deleteReason String?
  guild        Guild     @relation(fields: [guildId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "warn_guildId_guild_id_fk")
  moderator    User      @relation("warn_moderatorIdTousers", fields: [moderatorId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "warn_moderatorId_users_id_fk")
  user         User      @relation("warn_userIdTousers", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "warn_userId_users_id_fk")

  @@index([userId], map: "warn_userId_index")
  @@map("warn")
}

model Ultimatum {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  expiresAt DateTime
  endedAt   DateTime?
  userId    String
  guildId   String
  reason    String
  guild     Guild     @relation(fields: [guildId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
